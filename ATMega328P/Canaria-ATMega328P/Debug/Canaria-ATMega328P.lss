
Canaria-ATMega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000468  000004fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000468  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080010a  0080010a  00000506  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000506  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001300  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aef  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000995  00000000  00000000  00002487  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00002e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ff  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037f  00000000  00000000  0000366b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000039ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 00 02 	jmp	0x400	; 0x400 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  9e:	0c 94 32 02 	jmp	0x464	; 0x464 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initialise_ADC>:
#endif /* ADC_H_ */
/*
	Initialise ADC registers for operation on ADCCHANNEL.
*/
void initialise_ADC(void) {
	PRR &= ~(1 << PRADC);
  a6:	e4 e6       	ldi	r30, 0x64	; 100
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	80 83       	st	Z, r24
	
	/*
		Set channel of ADC.
	*/
	uint8_t channelADC = ADCCHANNEL & 0x07;
	ADMUX |= (channelADC);
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	80 83       	st	Z, r24

	/*
		Reference ADC from GND to AVCC
	*/
	ADMUX |= (1 << REFS0) & ~(1 << REFS1);
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
	/*
		Auto Trigger Disabled
		ADC Interrupt Flag Cleared
		ADC Interrupt Disabled
	*/
	ADCSRA &= ~((1 << ADATE) | (1 << ADIF) | (1 << ADIE));
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	87 7c       	andi	r24, 0xC7	; 199
  c8:	80 83       	st	Z, r24
	
	/*
		ADC Prescaler "/2".  (8MHz to 4MHz)
	*/
	ADCSRA &= ~((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0));
  ca:	80 81       	ld	r24, Z
  cc:	88 7f       	andi	r24, 0xF8	; 248
  ce:	80 83       	st	Z, r24
  d0:	08 95       	ret

000000d2 <start_adc>:
	/*
		Set:
			ADEN (ADC Enable)
			ADSC (ADC Start Conversion)
	*/
	ADCSRA |= (1 << ADEN) | (1 << ADSC);
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 6c       	ori	r24, 0xC0	; 192
  da:	80 83       	st	Z, r24

	if (DEBUG) {
		PORTC |= (1 << PORTC0);
  dc:	40 9a       	sbi	0x08, 0	; 8
  de:	08 95       	ret

000000e0 <stop_adc>:
	/*
		Clear:
			ADEN (ADC Enable)
			ADSC (ADC Start Conversion)
	*/
	ADCSRA &= ~((1 << ADEN) | (1 << ADSC));
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	8f 73       	andi	r24, 0x3F	; 63
  e8:	80 83       	st	Z, r24

	if (DEBUG) {
		PORTC &= ~(1 << PORTC0);
  ea:	40 98       	cbi	0x08, 0	; 8
  ec:	08 95       	ret

000000ee <sample_adc>:
}

/*
	Takes a set number of ADC readings (AVERAGES) and returns their sum.
*/
uint16_t sample_adc(void) {
  ee:	cf 92       	push	r12
  f0:	df 92       	push	r13
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	10 e0       	ldi	r17, 0x00	; 0
  fe:	e1 2c       	mov	r14, r1
 100:	f1 2c       	mov	r15, r1
	uint16_t result = 0x0000;
	for (uint8_t i = 0; i < AVERAGES; i++) {
		start_adc();
		while (ADCSRA & (1 << ADSC));
 102:	ca e7       	ldi	r28, 0x7A	; 122
 104:	d0 e0       	ldi	r29, 0x00	; 0
		result += ADC;
 106:	0f 2e       	mov	r0, r31
 108:	f8 e7       	ldi	r31, 0x78	; 120
 10a:	cf 2e       	mov	r12, r31
 10c:	d1 2c       	mov	r13, r1
 10e:	f0 2d       	mov	r31, r0
	Takes a set number of ADC readings (AVERAGES) and returns their sum.
*/
uint16_t sample_adc(void) {
	uint16_t result = 0x0000;
	for (uint8_t i = 0; i < AVERAGES; i++) {
		start_adc();
 110:	0e 94 69 00 	call	0xd2	; 0xd2 <start_adc>
		while (ADCSRA & (1 << ADSC));
 114:	88 81       	ld	r24, Y
 116:	86 fd       	sbrc	r24, 6
 118:	fd cf       	rjmp	.-6      	; 0x114 <sample_adc+0x26>
		result += ADC;
 11a:	f6 01       	movw	r30, r12
 11c:	80 81       	ld	r24, Z
 11e:	91 81       	ldd	r25, Z+1	; 0x01
 120:	e8 0e       	add	r14, r24
 122:	f9 1e       	adc	r15, r25
/*
	Takes a set number of ADC readings (AVERAGES) and returns their sum.
*/
uint16_t sample_adc(void) {
	uint16_t result = 0x0000;
	for (uint8_t i = 0; i < AVERAGES; i++) {
 124:	1f 5f       	subi	r17, 0xFF	; 255
 126:	10 38       	cpi	r17, 0x80	; 128
 128:	99 f7       	brne	.-26     	; 0x110 <sample_adc+0x22>
		start_adc();
		while (ADCSRA & (1 << ADSC));
		result += ADC;
	}
	stop_adc();
 12a:	0e 94 70 00 	call	0xe0	; 0xe0 <stop_adc>
	return result;
 12e:	c7 01       	movw	r24, r14
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	df 90       	pop	r13
 13c:	cf 90       	pop	r12
 13e:	08 95       	ret

00000140 <initialise_GPIO>:
*/
void initialise_GPIO(void) {
	/*
		PORTD6, PORTD7 and PORTB0 set as outputs.
	*/
	DDRD |= (1 << PORTD6) | (1 << PORTD7);
 140:	8a b1       	in	r24, 0x0a	; 10
 142:	80 6c       	ori	r24, 0xC0	; 192
 144:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << PORTB0);
 146:	20 9a       	sbi	0x04, 0	; 4
	
	/*
		PORTD6, PORTD7 and PORTB0 Initialised to logic LOW.
	*/
	PORTD &= ~((1 << PORTD6) | (1 << PORTD7));
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	8f 73       	andi	r24, 0x3F	; 63
 14c:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~(1 << PORTB0);
 14e:	28 98       	cbi	0x05, 0	; 5
	
	if (DEBUG) {
		/*
			DEBUG pin set to PORTC0.  Initialised to logic LOW.
		*/
		DDRB |= (1 << PORTC0);
 150:	20 9a       	sbi	0x04, 0	; 4
		PORTC &= ~(1 << PORTC0);
 152:	40 98       	cbi	0x08, 0	; 8
 154:	08 95       	ret

00000156 <initialisations>:
*/
void initialisations(void) {
	/*
		Initialise registers grouped in functional blocks.
	*/
	initialise_USART();
 156:	0e 94 21 02 	call	0x442	; 0x442 <initialise_USART>
	initialise_GPIO();
 15a:	0e 94 a0 00 	call	0x140	; 0x140 <initialise_GPIO>
	initialise_TC0();
 15e:	0e 94 14 01 	call	0x228	; 0x228 <initialise_TC0>
	initialise_TC1();
 162:	0e 94 c2 01 	call	0x384	; 0x384 <initialise_TC1>
	initialise_ADC();
 166:	0e 94 53 00 	call	0xa6	; 0xa6 <initialise_ADC>
	
	/*
		Enable global interrupts.
	*/
	sei();
 16a:	78 94       	sei
	
	/*
		Initialise Global Variables.
	*/
	isrService = 0x00;
 16c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <isrService>
	timeStampMulti = 0x00000000;
 170:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <timeStampMulti>
 174:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <timeStampMulti+0x1>
 178:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <timeStampMulti+0x2>
 17c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <timeStampMulti+0x3>
 180:	08 95       	ret

00000182 <main>:
	
	return;
}


int main(void) {
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	2a 97       	sbiw	r28, 0x0a	; 10
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61

	AverageStruct led;

	initialisations();
 196:	0e 94 ab 00 	call	0x156	; 0x156 <initialisations>

	start_sampling();
 19a:	0e 94 1b 01 	call	0x236	; 0x236 <start_sampling>
	/*
		Functioning loop.
	*/
	while(1) {

		if (isrService & (1 << TC1ISR)) {
 19e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <isrService>
 1a2:	80 ff       	sbrs	r24, 0
 1a4:	09 c0       	rjmp	.+18     	; 0x1b8 <main+0x36>
			handle_tc1(&led);
 1a6:	ce 01       	movw	r24, r28
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	0e 94 39 01 	call	0x272	; 0x272 <handle_tc1>
			isrService &= ~(1 << TC1ISR);
 1ae:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <isrService>
 1b2:	8e 7f       	andi	r24, 0xFE	; 254
 1b4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <isrService>
		}

		if (rxFlag) {
 1b8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <rxFlag>
 1bc:	88 23       	and	r24, r24
 1be:	79 f3       	breq	.-34     	; 0x19e <main+0x1c>
			handle_rx();
 1c0:	0e 94 10 02 	call	0x420	; 0x420 <handle_rx>
			rxFlag = DOWN;
 1c4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <rxFlag>
 1c8:	ea cf       	rjmp	.-44     	; 0x19e <main+0x1c>

000001ca <set_time_stamp>:
*/
void set_time_stamp(void) {
	/*
		Clear Timer/Counter 0 and Reset timeStampMulti.
	*/
	TCNT0 = 0x00;
 1ca:	16 bc       	out	0x26, r1	; 38
	timeStampMulti = 0x00000000;
 1cc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <timeStampMulti>
 1d0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <timeStampMulti+0x1>
 1d4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <timeStampMulti+0x2>
 1d8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <timeStampMulti+0x3>
 1dc:	08 95       	ret

000001de <__vector_16>:
/*
	Handles Timer/Counter 0 Overflow Interrupt Request
	Called when TCNT0 register overflows.  Increments 32-bit timeStampMulti to
	extend timestamp to 40 bits.
*/
ISR(TIMER0_OVF_vect) {
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
	timeStampMulti += 1;
 1f0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <timeStampMulti>
 1f4:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <timeStampMulti+0x1>
 1f8:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <timeStampMulti+0x2>
 1fc:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <timeStampMulti+0x3>
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	a1 1d       	adc	r26, r1
 204:	b1 1d       	adc	r27, r1
 206:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <timeStampMulti>
 20a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <timeStampMulti+0x1>
 20e:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <timeStampMulti+0x2>
 212:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <timeStampMulti+0x3>
}
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <initialise_TC0>:
		Wave Generation Mode (WGM) Mode 0 - 'Normal'
		COM0A set to normal port operation (OC0A disconnected - 0b00)
		COM0B set to normal port operation (OC0B disconnected - 0b00)
		Clock Select (CS0[2:0]) set to start (0b010) with /8 prescaler.
	*/
	TCCR0A &= ~((1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0) |
 228:	84 b5       	in	r24, 0x24	; 36
 22a:	8c 70       	andi	r24, 0x0C	; 12
 22c:	84 bd       	out	0x24, r24	; 36
			(1 << WGM01) | (1 << WGM00));
	TCCR0B |= (1 << CS01) & ~((1 << CS02) | (1 << CS00) | (1 << WGM02) |
 22e:	85 b5       	in	r24, 0x25	; 37
 230:	82 60       	ori	r24, 0x02	; 2
 232:	85 bd       	out	0x25, r24	; 37
 234:	08 95       	ret

00000236 <start_sampling>:
		Setting TOP of Timer/Counter 1.  High byte must be written first.
		Given a Sample Rate of 100Hz, methodSteps will further divide the
	*/
	uint16_t tcScaler = 8;
	uint16_t top = 8000000 / (2 * tcScaler * (SAMPLERATE * METHODSTEPS));
	OCR1AH = (unsigned char)(top >> 8);
 236:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = (unsigned char)(top);
 23a:	8d e7       	ldi	r24, 0x7D	; 125
 23c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	/*
		Set Timer Counter to 0
	*/
	TCNT1H = 0x00;
 240:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = 0x00;
 244:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
		010		/8 <--
		011		/64
		100		/256
		101		/1024
	*/
	TCCR1B |= (1 << CS11) & ~((1 << CS12) | (1 << CS10));
 248:	e1 e8       	ldi	r30, 0x81	; 129
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	82 60       	ori	r24, 0x02	; 2
 250:	80 83       	st	Z, r24
 252:	08 95       	ret

00000254 <stop_sampling>:
*/
void stop_sampling(void) {
	/*
		Deselects a clock source and stops Timer/Counter 1.
	*/
	TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10));
 254:	e1 e8       	ldi	r30, 0x81	; 129
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	88 7f       	andi	r24, 0xF8	; 248
 25c:	80 83       	st	Z, r24

	stop_adc();
 25e:	0e 94 70 00 	call	0xe0	; 0xe0 <stop_adc>

	/*
		Turns off Timer/Counter 1 and ADC in Power Management
	*/
	PRR |= (1 << PRTIM1) | (1 << PRADC);
 262:	e4 e6       	ldi	r30, 0x64	; 100
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	89 60       	ori	r24, 0x09	; 9
 26a:	80 83       	st	Z, r24
	
	/*
		Resets current step in main method for next start.
	*/
	methodFlag = 0;
 26c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 270:	08 95       	ret

00000272 <handle_tc1>:
/*
	Services Timer/Counter 1 Comparison Interrupt Request (TCNT1 == OCR1A).
	Main method.
	Handles the timing of LEDs, ADC sampling and result streaming.
*/
void handle_tc1(AverageStruct* led) {
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	ec 01       	movw	r28, r24
	if (methodFlag == READRED) {
 278:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	69 f4       	brne	.+26     	; 0x29a <handle_tc1+0x28>
		led->red = sample_adc();
 280:	0e 94 77 00 	call	0xee	; 0xee <sample_adc>
 284:	99 83       	std	Y+1, r25	; 0x01
 286:	88 83       	st	Y, r24
		send_message("r");
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <send_message>
		send_result_as_binary(led->red);
 290:	88 81       	ld	r24, Y
 292:	99 81       	ldd	r25, Y+1	; 0x01
 294:	0e 94 f7 01 	call	0x3ee	; 0x3ee <send_result_as_binary>
 298:	5c c0       	rjmp	.+184    	; 0x352 <handle_tc1+0xe0>
	} else if (methodFlag == READAMB1){
 29a:	85 30       	cpi	r24, 0x05	; 5
 29c:	69 f4       	brne	.+26     	; 0x2b8 <handle_tc1+0x46>
		led->amb1 = sample_adc();
 29e:	0e 94 77 00 	call	0xee	; 0xee <sample_adc>
 2a2:	9b 83       	std	Y+3, r25	; 0x03
 2a4:	8a 83       	std	Y+2, r24	; 0x02
		send_message("1");
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 da 01 	call	0x3b4	; 0x3b4 <send_message>
		send_result_as_binary(led->amb1);
 2ae:	8a 81       	ldd	r24, Y+2	; 0x02
 2b0:	9b 81       	ldd	r25, Y+3	; 0x03
 2b2:	0e 94 f7 01 	call	0x3ee	; 0x3ee <send_result_as_binary>
 2b6:	4d c0       	rjmp	.+154    	; 0x352 <handle_tc1+0xe0>
	} else if (methodFlag == READIR) {
 2b8:	89 30       	cpi	r24, 0x09	; 9
 2ba:	69 f4       	brne	.+26     	; 0x2d6 <handle_tc1+0x64>
		led->ir = sample_adc();
 2bc:	0e 94 77 00 	call	0xee	; 0xee <sample_adc>
 2c0:	9d 83       	std	Y+5, r25	; 0x05
 2c2:	8c 83       	std	Y+4, r24	; 0x04
		send_message("i");
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <send_message>
		send_result_as_binary(led->ir);
 2cc:	8c 81       	ldd	r24, Y+4	; 0x04
 2ce:	9d 81       	ldd	r25, Y+5	; 0x05
 2d0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <send_result_as_binary>
 2d4:	3e c0       	rjmp	.+124    	; 0x352 <handle_tc1+0xe0>
	} else if (methodFlag == READAMB2) {
 2d6:	8d 30       	cpi	r24, 0x0D	; 13
 2d8:	69 f4       	brne	.+26     	; 0x2f4 <handle_tc1+0x82>
		led->amb2 = sample_adc();
 2da:	0e 94 77 00 	call	0xee	; 0xee <sample_adc>
 2de:	9f 83       	std	Y+7, r25	; 0x07
 2e0:	8e 83       	std	Y+6, r24	; 0x06
		send_message("2");
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <send_message>
		send_result_as_binary(led->amb2);
 2ea:	8e 81       	ldd	r24, Y+6	; 0x06
 2ec:	9f 81       	ldd	r25, Y+7	; 0x07
 2ee:	0e 94 f7 01 	call	0x3ee	; 0x3ee <send_result_as_binary>
 2f2:	2f c0       	rjmp	.+94     	; 0x352 <handle_tc1+0xe0>
	} else if (methodFlag == READGREEN) {
 2f4:	81 31       	cpi	r24, 0x11	; 17
 2f6:	69 f4       	brne	.+26     	; 0x312 <handle_tc1+0xa0>
		led->green = sample_adc();
 2f8:	0e 94 77 00 	call	0xee	; 0xee <sample_adc>
 2fc:	99 87       	std	Y+9, r25	; 0x09
 2fe:	88 87       	std	Y+8, r24	; 0x08
		send_message("g");
 300:	88 e0       	ldi	r24, 0x08	; 8
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	0e 94 da 01 	call	0x3b4	; 0x3b4 <send_message>
		send_result_as_binary(led->green);
 308:	88 85       	ldd	r24, Y+8	; 0x08
 30a:	99 85       	ldd	r25, Y+9	; 0x09
 30c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <send_result_as_binary>
 310:	20 c0       	rjmp	.+64     	; 0x352 <handle_tc1+0xe0>
	} else if (methodFlag == RESET) {
 312:	87 32       	cpi	r24, 0x27	; 39
 314:	19 f4       	brne	.+6      	; 0x31c <handle_tc1+0xaa>
		methodFlag = 0;
 316:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
		return;
 31a:	20 c0       	rjmp	.+64     	; 0x35c <handle_tc1+0xea>
	} else {
		/*
			Fail-safe if ADC is still reading at time of LED transition.
			Will produce a false-negative in stead of false-positive.
		*/
		stop_adc();
 31c:	0e 94 70 00 	call	0xe0	; 0xe0 <stop_adc>

		if (methodFlag == ONRED) {
 320:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 324:	81 11       	cpse	r24, r1
 326:	02 c0       	rjmp	.+4      	; 0x32c <handle_tc1+0xba>
			/*************************** Send a Time Stamp ******************************/
			PORTD |= (1 << PORTD6);
 328:	5e 9a       	sbi	0x0b, 6	; 11
 32a:	13 c0       	rjmp	.+38     	; 0x352 <handle_tc1+0xe0>
		} else if (methodFlag == OFFRED) {
 32c:	84 30       	cpi	r24, 0x04	; 4
 32e:	11 f4       	brne	.+4      	; 0x334 <handle_tc1+0xc2>
			PORTD &= ~(1 << PORTD6);
 330:	5e 98       	cbi	0x0b, 6	; 11
 332:	0f c0       	rjmp	.+30     	; 0x352 <handle_tc1+0xe0>
		} else if (methodFlag == ONIR) {
 334:	88 30       	cpi	r24, 0x08	; 8
 336:	11 f4       	brne	.+4      	; 0x33c <handle_tc1+0xca>
			PORTD |= (1 << PORTD7);
 338:	5f 9a       	sbi	0x0b, 7	; 11
 33a:	0b c0       	rjmp	.+22     	; 0x352 <handle_tc1+0xe0>
		} else if (methodFlag == OFFIR) {
 33c:	8c 30       	cpi	r24, 0x0C	; 12
 33e:	11 f4       	brne	.+4      	; 0x344 <handle_tc1+0xd2>
			PORTD &= ~(1 << PORTD7);
 340:	5f 98       	cbi	0x0b, 7	; 11
 342:	07 c0       	rjmp	.+14     	; 0x352 <handle_tc1+0xe0>
		} else if (methodFlag == ONGREEN) {
 344:	80 31       	cpi	r24, 0x10	; 16
 346:	11 f4       	brne	.+4      	; 0x34c <handle_tc1+0xda>
			PORTB |= (1 << PORTB0);
 348:	28 9a       	sbi	0x05, 0	; 5
 34a:	03 c0       	rjmp	.+6      	; 0x352 <handle_tc1+0xe0>
		} else if (methodFlag == OFFGREEN) {
 34c:	84 31       	cpi	r24, 0x14	; 20
 34e:	09 f4       	brne	.+2      	; 0x352 <handle_tc1+0xe0>
			PORTB &= ~(1 << PORTB0);
 350:	28 98       	cbi	0x05, 0	; 5
		}
	}

	methodFlag += 1;
 352:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	return;
}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <__vector_11>:

/*
	Flags main()s functioning loop to call handle_tc1().
*/
ISR(TIMER1_COMPA_vect) {
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	8f 93       	push	r24
	isrService |= (1 << TC1ISR);
 36e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <isrService>
 372:	81 60       	ori	r24, 0x01	; 1
 374:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <isrService>
	return;
}
 378:	8f 91       	pop	r24
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <initialise_TC1>:
		Wave Generation Mode (WGM) Mode 4 - 'CTC' - 0b0100
		COM1A set to Normal Port Operation (OC1A disconnected - 0b00)
		COM1B set to Normal Port Operation (OC1B disconnected - 0b00)
		Clock Select (CS[2:0]) set to stop (0b000)
	*/
	TCCR1A &= ~((1 << WGM11) | (1 << WGM10) | (1 << COM1A1) | (1 << COM1A0) |
 384:	e0 e8       	ldi	r30, 0x80	; 128
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	8c 70       	andi	r24, 0x0C	; 12
 38c:	80 83       	st	Z, r24
			(1 << COM1B1) | (1 << COM1B0));
	TCCR1B |= (1 << WGM12) & ~((1 << WGM13) | (1 << CS12) | (1 << CS11) | (1 << CS10));
 38e:	e1 e8       	ldi	r30, 0x81	; 129
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	88 60       	ori	r24, 0x08	; 8
 396:	80 83       	st	Z, r24
	/*
		Timer/Counter1 Compare Match A		TIMER1_COMPA_vect
	*/
	TIMSK1 |= (1 << OCIE1A);
 398:	ef e6       	ldi	r30, 0x6F	; 111
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	82 60       	ori	r24, 0x02	; 2
 3a0:	80 83       	st	Z, r24
 3a2:	08 95       	ret

000003a4 <send_data>:
*/
void send_data(unsigned char data) {
	/*
		Waits for UDR0 to be cleared (by receiving or transmitting).
	*/
	while (!((1 << UDRE0) & UCSR0A));
 3a4:	e0 ec       	ldi	r30, 0xC0	; 192
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	90 81       	ld	r25, Z
 3aa:	95 ff       	sbrs	r25, 5
 3ac:	fd cf       	rjmp	.-6      	; 0x3a8 <send_data+0x4>
	/*
		USART Data Register filled with data.  Hardware logic handles
		transmission and timing.
	*/
	UDR0 = data;
 3ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3b2:	08 95       	ret

000003b4 <send_message>:
}

/*
	Calls send_data() for a given string.
*/
void send_message(char* output) {
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
	int length = strlen(output);
 3bc:	fc 01       	movw	r30, r24
 3be:	01 90       	ld	r0, Z+
 3c0:	00 20       	and	r0, r0
 3c2:	e9 f7       	brne	.-6      	; 0x3be <send_message+0xa>
 3c4:	31 97       	sbiw	r30, 0x01	; 1
 3c6:	e8 1b       	sub	r30, r24
 3c8:	f9 0b       	sbc	r31, r25

	/*
		Sends string upto and excluding the first null character ('\0').
	*/
	for (int i = 0; i < length; i++) {
 3ca:	1e 16       	cp	r1, r30
 3cc:	1f 06       	cpc	r1, r31
 3ce:	54 f4       	brge	.+20     	; 0x3e4 <send_message+0x30>
 3d0:	ec 01       	movw	r28, r24
 3d2:	8c 01       	movw	r16, r24
 3d4:	0e 0f       	add	r16, r30
 3d6:	1f 1f       	adc	r17, r31
		send_data(output[i]);
 3d8:	89 91       	ld	r24, Y+
 3da:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <send_data>
	int length = strlen(output);

	/*
		Sends string upto and excluding the first null character ('\0').
	*/
	for (int i = 0; i < length; i++) {
 3de:	c0 17       	cp	r28, r16
 3e0:	d1 07       	cpc	r29, r17
 3e2:	d1 f7       	brne	.-12     	; 0x3d8 <send_message+0x24>
		send_data(output[i]);
	}
}
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	08 95       	ret

000003ee <send_result_as_binary>:

/*
	Sends a 16-bit value as binary.  Use to send ADC average results in binary.
*/
void send_result_as_binary(uint16_t output) {
 3ee:	cf 93       	push	r28
 3f0:	c9 2f       	mov	r28, r25
	/*
		Sends least-significant 8-bits.
	*/
	uint8_t rawOutput = output;
	send_data(rawOutput);
 3f2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <send_data>

	/*
		Sends most-significant 8-bits.
	*/
	rawOutput = (output >> 8);
	send_data(rawOutput);
 3f6:	8c 2f       	mov	r24, r28
 3f8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <send_data>
}
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <__vector_18>:

/*
	Handles USART Receive Interrupt Request
	rxFlag is serviced later in main()s Functioning loop.
*/
ISR(USART_RX_vect) {
 400:	1f 92       	push	r1
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	0f 92       	push	r0
 408:	11 24       	eor	r1, r1
 40a:	8f 93       	push	r24
	/*
		Reads the USART Data Register into rxFlag.
	*/
	rxFlag = UDR0;
 40c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 410:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <rxFlag>
	return;
}
 414:	8f 91       	pop	r24
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <handle_rx>:
/*
	Services Data Reception from USART.  Packet received determines the
	function call.
*/
void handle_rx(void) {
	if (rxFlag == SETTIMESTAMP) {
 420:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <rxFlag>
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	19 f4       	brne	.+6      	; 0x42e <handle_rx+0xe>
		set_time_stamp();
 428:	0e 94 e5 00 	call	0x1ca	; 0x1ca <set_time_stamp>
 42c:	08 95       	ret
	} else if (rxFlag == STARTSAMPLING) {
 42e:	82 30       	cpi	r24, 0x02	; 2
 430:	19 f4       	brne	.+6      	; 0x438 <handle_rx+0x18>
		start_sampling();
 432:	0e 94 1b 01 	call	0x236	; 0x236 <start_sampling>
 436:	08 95       	ret
	} else if (rxFlag == STOPSAMPLING) {
 438:	83 30       	cpi	r24, 0x03	; 3
 43a:	11 f4       	brne	.+4      	; 0x440 <handle_rx+0x20>
		stop_sampling();
 43c:	0e 94 2a 01 	call	0x254	; 0x254 <stop_sampling>
 440:	08 95       	ret

00000442 <initialise_USART>:
*/
void initialise_USART(void) {
	/*
		Enable USART from Power Management.
	*/
	PRR &= ~(1 << PRUSART0);
 442:	e4 e6       	ldi	r30, 0x64	; 100
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	8d 7f       	andi	r24, 0xFD	; 253
 44a:	80 83       	st	Z, r24
	
	/*
		Set baud rate from calculated UBRR.
	*/
	UBRR0H = (unsigned char)((SETUBRR) >> 8);
 44c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)(SETUBRR);
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/*
		Enable receiver and transmitter.
		Interrupt enabled on reception.  
	*/
	UCSR0B = ((1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0)) & ~((1 << UDRIE0) | (1 << UCSZ02));
 456:	88 e9       	ldi	r24, 0x98	; 152
 458:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	/*
		Asynchronous mode
		Packet Structure: 8 data bits, 1 stop bit, odd parity
	*/
	UCSR0C = ((1 << UCSZ01) | (1 << UCSZ00) | (1 << UPM01) | (1 << UPM00)) &
 45c:	86 e3       	ldi	r24, 0x36	; 54
 45e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 462:	08 95       	ret

00000464 <_exit>:
 464:	f8 94       	cli

00000466 <__stop_program>:
 466:	ff cf       	rjmp	.-2      	; 0x466 <__stop_program>
